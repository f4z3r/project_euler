# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import math, intsets

proc get_factors_len(val: int): int =
  var facs = init_IntSet()
  for idx in 1..sqrt(val.to_float).to_int:
    if val mod idx == 0:
      facs.incl(idx)
      facs.incl((val/idx).to_int)
  result = facs.len


iterator triangular_nums(): int =
  var idx = 1
  var num = 0
  while true:
    num += idx
    idx += 1
    yield num


proc solution*(val: int): int =
  for t_num in triangular_nums():
    let facs = t_num.get_factors_len
    if facs >= val:
      return t_num



